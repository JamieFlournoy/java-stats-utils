buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.commercehub:gradle-cucumber-jvm-plugin:0.14"
  }
}

plugins {
    // This is used for running "./gradlew dependencyUpdates" to find
    // available library updates (for use when updating version numbers
    // in this file).
    id "com.github.ben-manes.versions" version "0.20.0"

    // This adds ErrorProne, which warns about source code that looks
    // like it's likely to be a bug, or to lead to future bugs.
    id "net.ltgt.errorprone" version "0.6"

    // This plugin provides integration test tasks using the Cucumber
    // behavior-driven development tool.
    id 'com.commercehub.cucumber-jvm' version '0.14'
}

// These rules apply to all subprojects.
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'cucumber-jvm'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        jcenter()
        mavenLocal()

        // Uncomment to allow a dependency on a non-release
        // (-SNAPSHOT) version of a library from the Sonatype OSSRH
        // snapshot repository:
        // maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        // Dependencies that are needed at runtime and compile-time, and
        // that are also exposed as part of the public API:

        // Dependencies needed at runtime and compile-time, but not
        // exposed in the API of this library:
        implementation 'com.google.guava:guava:27.0-jre'

        // Dependencies needed for running tests:
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:2.+'
        testImplementation "com.google.truth:truth:0.42"

        // To make the Eclipse Gradle plugin put Cucumber jars on the source path:
        testImplementation 'io.cucumber:cucumber-java8:4.2.0'

        // Dependencies needed when running ErrorProne checks:
        errorprone "com.google.errorprone:error_prone_core:2.3.2"
    }


    tasks.withType(JavaCompile).configureEach {
        options.errorprone.disableWarningsInGeneratedCode = true
    }

    // Example code shouldn't be put in the library .jar, but should be compiled
    // before running unit and integration tests. So create a separate sourceSet
    // for example code, and make a task to compile it.
    sourceSets {
        examples {
            java {
                compileClasspath += main.output + main.runtimeClasspath
                runtimeClasspath += main.output + main.runtimeClasspath
            }
        }
    }
    configurations {
        examplesCompile.extendsFrom mainCompile
        examplesRuntime.extendsFrom mainRuntime
    }

    addCucumberSuite 'cucumberTest'
    cucumber {
        maxParallelForks = 4
    }
    dependencies {
        cucumberTestImplementation 'io.cucumber:cucumber-java8:4.2.0'
        cucumberTestImplementation 'junit:junit:4.12'
        cucumberTestImplementation "com.google.truth:truth:0.42"
        cucumberTestImplementation  group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    }
    sourceSets {
        cucumberTest {
            java {
                compileClasspath += examples.output
                runtimeClasspath += examples.output
            }
        }
    }

    // Don't run Cucumber integration tests unless JUnit unit tests pass.
    cucumberTest.dependsOn 'test'

    // Generate Javadoc documentation files from Java source code.
    javadoc {
        source = sourceSets.main.allJava
        // This classpath value makes the source's dependencies visible to
        // the Javadoc tool.
        classpath = sourceSets.main.runtimeClasspath

        options.addBooleanOption('html5', true)
        options {
            // Only document public members.
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor false

            // Generate Javadocs links even when offline, using the
            // element-list or package-list file copied from the public
            // Javadocs to a local subdir. (The package-list file contains
            // a list of Java package names of classes which are
            // documented in the Javadocs rooted at the specified URL.)
            linksOffline "https://docs.oracle.com/javase/10/docs/api/", '../gradle/javadocs/jdk/10'
            linksOffline "https://google.github.io/guava/releases/27.0-jre/api/docs/", '../gradle/javadocs/guava/27.0-jre'
        }
    }

    // Make a source code JAR archive.
    task sourcesJar(type: Jar, dependsOn: 'classes') {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    // Make a Javadoc JAR archive.
    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                // Include the sources and Javadoc JAR files when
                // publishing.
                artifact sourcesJar
                artifact javadocJar

                afterEvaluate {
                    groupId = 'com.pervasivecode'
                    // artifact and version are left to subprojects to define.

                    pom {
                        url = 'https://github.com/JamieFlournoy/java-stats-utils'

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'jamieflournoy'
                                name = 'Jamie Flournoy'
                                organization = 'Pervasive Code'
                                email = 'jamie@pervasivecode.com'
                                url = 'https://github.com/JamieFlournoy'
                                organizationUrl = 'http://www.pervasivecode.com/'
                            }
                        }

                        issueManagement {
                            url = 'https://github.com/JamieFlournoy/java-stats-utils/issues'
                            system = 'GitHub Issues'
                        }

                        scm {
                            url = 'https://github.com/JamieFlournoy/java-stats-utils'
                            connection = 'scm:git:git://github.com/JamieFlournoy/java-stats-utils.git'
                            developerConnection = 'scm:git:git@github.com:JamieFlournoy/java-stats-utils.git'
                        }
                    }

                }
            }
        }

        // Publish directly to a local directory (not the local Maven
        // repository, but a directory under the build dir), for
        // inspection & manual uploading.
        repositories {
            maven {
                name = 'buildDir'
                url = "file://${buildDir}/repo"
            }
            // Note: to deploy to this repository, you must set the
            // OSSRH_PASSWORD environment variable. Also, the publication
            // version (see above) must end in "-SNAPSHOT" or this will
            // fail with an HTTP response code of 400 Bad Request.
            maven {
                name = 'ossrhSnapshots'
                url = 'https://oss.sonatype.org/content/repositories/snapshots'
                credentials {
                    username = ossrhUsername
                    password = System.getenv('OSSRH_PASSWORD')
                }
            }
            // Note: to deploy to this repository, you must set the
            // OSSRH_PASSWORD environment variable. Also, the publication
            // version (see above) must _not_ end in "-SNAPSHOT" or this
            // will fail with an HTTP response code of 400 Bad Request.
            maven {
                name = 'ossrhReleaseStaging'
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    username = ossrhUsername
                    password = System.getenv('OSSRH_PASSWORD')
                }
            }
        }
    }

    signing {
        // Sign assets that are destined for publication in a Maven Java
        // archive.
        useGpgCmd()
        sign publishing.publications.mavenJava
    }

} // end of subprojects stanza



