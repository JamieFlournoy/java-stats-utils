Split the  library into  two modules:  a plain  JAR and  an additional  JAR that
depends on the plain jar, java-measure-utils, and JSR-363 things.

Improvements to ConsoleHistogramFormatter:

- Change the bucketLabels in the histogram to not look cumulative (<=2, <=4
  implies that the second one includes the count in the first one). Make this
  clearer look the default, and make the narrower current look be available as
  an option.

  - extract a BucketLabelFormatter interface and have impls that do current and
    range-style formats, leaving open the ability to format using a
    caller-provided impl.

- extract a BucketCountFormatter interface that lets callers decide whether to
  format bucket values with % or count, and what bar graph character to use.

- Add an optional empty-bucket trimming from output (no need to see smallest
  buckets w/ 0 count nor largest buckets w/ 0 count).

- Add a maxWidth that constrains total histogram width including labels and
  formatted counts. Keep maxBarGraphWidth as a concept, but let it be
  dynamically set by the formatter using its knowledge of formatted label and
  formatted value max column widths, unless the user sets it. If the user does
  set it, the formatter should use the smaller value of the dynamically
  calculated maxBarGraphWidth and the user-specified maxBarGraphWidth, so the
  width of the whole formatted histogram never exceeds maxWidth.

- Change to a builder-style constructor (keep the class immutable, but return a
  new instance with the modified configuration).

- Add an example program showing how callers can autodetect the terminal width
  in ConsoleHistogram*Formatter. (See
  https://stackoverflow.com/questions/1286461/can-i-find-the-console-width-with-java)

Move some logic out of ConsoleHistogramFormater into Histograms:

- Get all of the bucket counts as a collection of some kind, in index order.
  (This simplifies operations max(count) and sum(count) which formatters need,
  without burdening the Histogram interface with specific methods like "bucket
  index of max count" or "range containing max count" which could easily be done
  with a collection of counts in whatever way callers may need.)
